import asyncio
import logging
import os
# Removed unused import: sqlite3
# Removed unused import: datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes
)
# Fix the incorrect import for command scopes
from telegram import BotCommandScopeDefault, BotCommandScopeAllGroupChats

# Import from the refactored database package
from database import (
    # Removed duplicate import: init_consent_db
    create_database,
    add_user_result,
    get_user_result,
    validate_input,
    # Removed unused import: get_all_results
)
# Import from the new user module
from user import (
    is_user_in_group,
    init_consent_db,
    save_user_consent,
    check_user_consent,
    revoke_user_consent,
    handle_group_message,  # Updated to import from user module
    leaderboard,
    leaderboard_all,  # Import leaderboard functions from user package
    # Add these imports for admin functionality
    register_admin_handlers
)
# Remove this import as it's now included in the user package
# from leaderboard import leaderboard, leaderboard_all
from config import BOT_TOKEN

# Get data directory from environment variable or use default
DATA_DIR = os.environ.get('DATA_DIR', './data')

# Create data directory if it doesn't exist
os.makedirs(DATA_DIR, exist_ok=True)

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Constants - use environment-based path
CONSENT_DB = os.path.join(DATA_DIR, 'consent.db')

# Help text constant to avoid duplication
HELP_TEXT = (
    "üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞:\n\n"
    "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n"
    "/leaderboard - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã\n"
    "/leaderboard_all - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ –≤—Å–µ—Ö –≥—Ä—É–ø–ø\n"
    "/revoke - –û—Ç–æ–∑–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö\n"
    "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
    "–ß—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç—Ä–µ–ª—å–±—ã, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞:\n"
    "–°–µ—Ä–∏—è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–î–µ—Å—è—Ç–æ–∫(—Ü–µ–Ω—Ç—Ä–æ–≤—ã—Ö, –µ—Å–ª–∏ —Å–µ—Ä–∏—è >=93)\n"
    "–ù–∞–ø—Ä–∏–º–µ—Ä: 92 3"
)

# Consent required message to avoid duplication
CONSENT_REQUIRED_TEXT = (
    "–•–æ—á—É —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å—ë –ø–æ-—á–µ—Å—Ç–Ω–æ–º—É –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è —Ç–µ–±—è üòä "
    "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω—É–∂–Ω–æ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö. "
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏ /start –∏ –ø—Ä–∏–º–∏ —É—Å–ª–æ–≤–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤. –Ø –ø–æ–¥–æ–∂–¥—É ü§ù"
)

def get_consent_keyboard():
    """Return the standard consent keyboard with three options."""
    keyboard = [
        [InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data='agree')],
        [InlineKeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö", callback_data='view_policy')],
        [InlineKeyboardButton("‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data='disagree')]
    ]
    return InlineKeyboardMarkup(keyboard)

# ==== CONSENT HANDLERS ====
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a welcome message and request user consent if not already given."""
    if await handle_group_message(update, context):
        return
        
    user = update.effective_user
    
    # Check consent first
    if check_user_consent(user.id):
        logger.info(f"User {user.username} (ID: {user.id}) already gave consent, proceeding")
        await update.message.reply_text(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}! üëã\n–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –ø–æ–ª—É—á–µ–Ω–æ ‚Äî –ø–µ—Ä–≤—ã–π –≤—ã—Å—Ç—Ä–µ–ª —Å–¥–µ–ª–∞–Ω. –ú–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å.")
        
        # Check group membership
        user_id = update.message.from_user.id
        is_member, error_message = await is_user_in_group(user_id, context.bot)

        if not is_member:
            await update.message.reply_text(f'–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã. {error_message}')
            return
            
        await help_command(update, context)
        return

    # Request consent if not given
    reply_markup = get_consent_keyboard()

    text = (
        "–ü—Ä–∏–≤–µ—Ç, —Å—Ç—Ä–µ–ª–æ–∫! üëã\n\n"
        "–ü—Ä–µ–∂–¥–µ —á–µ–º –≤—ã–π—Ç–∏ –Ω–∞ —Ä—É–±–µ–∂ ‚Äî –æ–¥–∏–Ω –≤–∞–∂–Ω—ã–π —à–∞–≥. –û–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º.\n"
        "–ú—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–≤–æ–µ–π —Å—Ç—Ä–µ–ª—å–±—ã ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ –º–∏–Ω–∏–º—É–º—É –∏ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–¥–∏ —á–µ—Å—Ç–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. üìäüîê\n\n"
        "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏.\n"
        "–° —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ ‚Äî —Ç—ã –≤ –∏–≥—Ä–µ. –ó–∞—Ä—è–∂–∞–π... –°—Ç–∞—Ä—Ç! üí•üéØ"
            )

    await update.message.reply_text(text, reply_markup=reply_markup)
    logger.info(f"Consent request sent to user {user.username} (ID: {user.id})")

async def handle_consent(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle the user's consent choice from inline keyboard."""
    query = update.callback_query
    user = query.from_user
    await query.answer()

    if query.data == 'agree':
        success = save_user_consent(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name
        )
        
        if success:
            await query.edit_message_text(
                "–ï—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç! üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ ‚Äî –≤—ã—Å—Ç—Ä–µ–ª –≤ –¥–µ—Å—è—Ç–∫—É! üéØ\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—Å—ë –≥–æ—Ç–æ–≤–æ: —Ä—É–±–µ–∂ –æ—Ç–∫—Ä—ã—Ç, –º–∏—à–µ–Ω–∏ –∂–¥—É—Ç, –∫–æ–º–∞–Ω–¥–∞ –±–æ–ª–µ–µ—Ç –∑–∞ —Ç–µ–±—è! üöÄ\n"
                "–í–ø–µ—Ä—ë–¥ –∫ –ø–æ–±–µ–¥–∞–º –∏ —è—Ä–∫–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º! ü•áüí™"
            )
            
            # Check group membership after consent
            is_member, error_message = await is_user_in_group(user.id, context.bot)
            if not is_member:
                await context.bot.send_message(
                    chat_id=user.id,
                    text=f'–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã. {error_message}'
                )
            else:
                # Send help message using the constant
                await context.bot.send_message(chat_id=user.id, text=HELP_TEXT)
        else:
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    elif query.data == 'disagree':
        await query.edit_message_text(
            "–ü–æ–Ω—è–ª —Ç–µ–±—è. –ë–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –¥–∞–ª—å—à–µ –∏–¥—Ç–∏ –Ω–µ–ª—å–∑—è ‚Äî —Ç–∞–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞ —Ä—É–±–µ–∂–µ. üòî\n"
            "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å ‚Äî –∫–æ–º–∞–Ω–¥–∞ –∏ –º–∏—à–µ–Ω–∏ –±—É–¥—É—Ç –∂–¥–∞—Ç—å. üéØ"
        )
        logger.info(f"User {user.username} (ID: {user.id}) has declined consent")
    
    elif query.data == 'view_policy':
        try:
            # Get the policy file path from root directory
            policy_path = 'policy.pdf'
            
            # Edit the current message to inform the user
            await query.edit_message_text("–û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª –ø–æ–ª–∏—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
            
            # Send the policy file as a document
            await context.bot.send_document(
                chat_id=user.id,
                document=open(policy_path, 'rb'),
                filename="–ü–æ–ª–∏—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.pdf",
                caption="–ü–æ–ª–∏—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
            )
            logger.info(f"Policy document sent to user {user.username} (ID: {user.id})")
            
            # Show the consent options again in a new message
            reply_markup = get_consent_keyboard()
            
            text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:"
            await context.bot.send_message(
                chat_id=user.id,
                text=text,
                reply_markup=reply_markup
            )
            
        except FileNotFoundError:
            logger.error(f"Policy file not found at {policy_path}")
            await query.edit_message_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ–∞–π–ª –ø–æ–ª–∏—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            
            # Re-display consent buttons
            reply_markup = get_consent_keyboard()
            await context.bot.send_message(
                chat_id=user.id,
                text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"Error sending policy to user {user.id}: {e}")
            await query.edit_message_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª–∏—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            
            # Re-display consent buttons
            reply_markup = get_consent_keyboard()
            await context.bot.send_message(
                chat_id=user.id,
                text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
                reply_markup=reply_markup
            )

async def revoke_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Revoke user's consent."""
    if await handle_group_message(update, context):
        return
        
    user = update.effective_user
    if not check_user_consent(user.id):
        await update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ –¥–∞–≤–∞–ª —Å–æ–≥–ª–∞—Å–∏–µ –∏–ª–∏ —É–∂–µ –µ–≥–æ –æ—Ç–æ–∑–≤–∞–ª.")
        return

    success = revoke_user_consent(user.id)
    if success:
        await update.message.reply_text(
            "–¢—ã —Å–¥–µ–ª–∞–ª —Å–≤–æ–π –≤—ã–±–æ—Ä ‚Äî —Å–ø–æ–∫–æ–π–Ω–æ, —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–Ω–æ, –∫–∞–∫ –ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤—ã—Å—Ç—Ä–µ–ª–æ–º –≤ —Ñ–∏–Ω–∞–ª–µ. "
            "–ù–æ –∑–∞–ø–æ–º–Ω–∏: –Ω–∞—Å—Ç–æ—è—â–∏–π —Å—Ç—Ä–µ–ª–æ–∫ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Ç–µ—Ä—è–µ—Ç —Ö–≤–∞—Ç–∫—É. –û–Ω –ø—Ä–æ—Å—Ç–æ —É—Ö–æ–¥–∏—Ç —Å —Ä—É–±–µ–∂–∞, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è —Å–∏–ª—å–Ω–µ–µ.\n\n"
            "–ö–æ–≥–¥–∞ –ø–æ—á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ –¥—ã—Ö–∞–Ω–∏–µ —Ä–æ–≤–Ω–æ–µ, —Ö–≤–∞—Ç —É–≤–µ—Ä–µ–Ω–Ω—ã–π –∏ —Å–Ω–æ–≤–∞ —Ö–æ—á–µ—Ç—Å—è –≤ –±–æ–π ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /start. "
            "–ú–∏—à–µ–Ω—å –∂–¥–µ—Ç. –ê —Ç—ã —É–∂–µ –∑–Ω–∞–µ—à—å, –∫–∞–∫ —ç—Ç–æ ‚Äî –±–∏—Ç—å —Ç–æ—á–Ω–æ –≤ —Ü–µ–Ω—Ç—Ä. üéØü•á"
)
        logger.info(f"User {user.username} (ID: {user.id}) has revoked consent")
    else:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ —Å–æ–≥–ª–∞—Å–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def extract_shooting_data(result):
    """Extract best series and total tens from a result tuple.
    
    Args:
        result: A tuple containing user shooting data
        
    Returns:
        Tuple of (best_series, total_tens)
    """
    if not result:
        return None, None
    
    best_series = result[4]
    total_tens = result[5]
    return best_series, total_tens

# Update existing handlers to check for consent
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show a user's currently saved result."""
    if await handle_group_message(update, context):
        return
        
    user_id = update.message.from_user.id
    
    # Check consent first
    if not check_user_consent(user_id):
        await update.message.reply_text(
            "–ü–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º –Ω–∞ –ª–∏–Ω–∏—é –Ω—É–∂–µ–Ω —á—ë—Ç–∫–∏–π —Å–∏–≥–Ω–∞–ª —Å–æ–≥–ª–∞—Å–∏—è. üìù\n"
            "–ë–µ–∑ —ç—Ç–æ–≥–æ ‚Äî –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤—ã—Å—Ç—Ä–µ–ª–∞.\n\n"
            "–ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –Ω–∞ —Ä—É–±–µ–∂. üéØ"
        )
        return
    
    # Get user result and extract data using the helper function
    result = get_user_result(user_id)
    if result:
        best_series, total_tens = extract_shooting_data(result)
        if best_series >= 93:
            message = f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n–õ—É—á—à–∞—è —Å–µ—Ä–∏—è: {best_series}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö –¥–µ—Å—è—Ç–æ–∫: {total_tens}x"
        else:
            message = f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n–õ—É—á—à–∞—è —Å–µ—Ä–∏—è: {best_series}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Å—è—Ç–æ–∫: {total_tens}"
        
        await update.message.reply_text(message)
    else:
        await update.message.reply_text("–í—ã –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")

# Update the handle_result function to use the membership check
async def handle_result(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Handle a text message from the user containing best_series and total_tens.
    Example input: "92 3"
    """
    # First check if we have a valid message with a user
    if not update.message or not update.message.from_user:
        logger.warning("Received update without valid message or user information")
        return
        
    if await handle_group_message(update, context):
        return
        
    user_id = update.message.from_user.id
    
    # Check if user has given consent
    if not check_user_consent(user_id):
        await update.message.reply_text(CONSENT_REQUIRED_TEXT)
        return

    # Validate user is in group
    is_member, error_message = await is_user_in_group(user_id, context.bot)

    if not is_member:
        await update.message.reply_text(f'–í–∞–º –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. {error_message}')
        return

    # Parse the incoming text
    text_parts = update.message.text.strip().split()
    if len(text_parts) < 2:
        await update.message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏ –ª—É—á—à—É—é —Å–µ—Ä–∏—é, –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Å—è—Ç–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, "92 3"'
        )
        return

    try:
        best_series = int(text_parts[0])
        total_tens = int(text_parts[1])
    except ValueError:
        await update.message.reply_text(
            '–ß—Ç–æ–±—ã –≤—Å—ë —Å—Ä–∞–±–æ—Ç–∞–ª–æ –∫–∞–∫ –Ω–∞–¥–æ, "–ª—É—á—à–∞—è —Å–µ—Ä–∏—è" –∏ "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Å—è—Ç–æ–∫" –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ü–∏—Ñ—Ä–∞–º–∏ üòä.'
        )
        return

    # Validate input ranges
    if best_series < 93:
        if best_series < total_tens * 10:
            await update.message.reply_text(
                '–û–π, –∫–∞–∂–µ—Ç—Å—è, —Ç—É—Ç –Ω–µ–±–æ–ª—å—à–∞—è –ø—É—Ç–∞–Ω–∏—Ü–∞: –õ—É—á—à–∞—è —Å–µ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ, —á–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Å—è—Ç–æ–∫ √ó 10. –î–∞–≤–∞–π –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏–º! üòä'
            )
            return

        if best_series > total_tens * 10 + (10 - total_tens) * 9:
            await update.message.reply_text(
                '–ü–æ—Ö–æ–∂–µ, "–õ—É—á—à–∞—è —Å–µ—Ä–∏—è" –∑–∞–≤—ã—à–µ–Ω–∞ üòä –û–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ, —á–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Å—è—Ç–æ–∫ √ó 10, –¥–∞–∂–µ –µ—Å–ª–∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤—ã—Å—Ç—Ä–µ–ª—ã ‚Äî –¥–µ–≤—è—Ç–∫–∏. –ü—Ä–æ–≤–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!'
            )
            return

    if not (0 <= best_series <= 100):
        await update.message.reply_text(
            '–•–º, –∫–∞–∂–µ—Ç—Å—è, —Å —Å–µ—Ä–∏–µ–π —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ ü§î –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 100. –ü—Ä–æ–≤–µ—Ä—å –µ—â—ë —Ä–∞–∑–æ–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä'
        )
        return
        
    if not (0 <= total_tens <= 10):
        await update.message.reply_text(
            '–ü—Ä–æ–≤–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Å—è—Ç–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 10 üòä.'
        )
        return

    # Validate and compare with previous results
    if validate_input(best_series, total_tens):
        previous_result = get_user_result(user_id)
        previous_group = None
        
        # Determine previous group if there was a previous result
        if previous_result:
            prev_best_series = previous_result[4]  # Updated index for best_series
            prev_total_tens = previous_result[5]   # Updated index for total_tens
            
            # Determine the previous group
            if prev_best_series >= 93:
                previous_group = "–ü—Ä–æ—Ñ–∏"
            elif prev_best_series >= 80:
                previous_group = "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ"
            else:
                previous_group = "–õ—é–±–∏—Ç–µ–ª–∏"

            # If new results are worse, ignore them
            if best_series < prev_best_series or \
               (best_series == prev_best_series and total_tens < prev_total_tens):
                await update.message.reply_text(
                    '–ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ‚Äî –Ω–æ–≤—ã–µ —á—É—Ç—å —Å–∫—Ä–æ–º–Ω–µ–µ. –ù–æ —ç—Ç–æ –≤—Å–µ–≥–æ –ª–∏—à—å —à–∞–≥ –≤ –ø—É—Ç–∏ üí´ –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è, —Ç—ã —Ä–∞—Å—Ç—ë—à—å —Å –∫–∞–∂–¥—ã–º –≤—ã—Å—Ç—Ä–µ–ª–æ–º!'
                )
                return

        # Get user details from Telegram
        first_name = update.message.from_user.first_name
        last_name = update.message.from_user.last_name or ""
        username = update.message.from_user.username or ""

        # Save the new result with separated user fields
        add_user_result(
            user_id,
            first_name,
            last_name,
            username,
            best_series,
            total_tens
        )
        
        # Determine the new group
        new_group = None
        if best_series >= 93:
            new_group = "–ü—Ä–æ—Ñ–∏"
        elif best_series >= 80:
            new_group = "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ"
        else:
            new_group = "–õ—é–±–∏—Ç–µ–ª–∏"
        
        # Check if user moved to a higher group
        if previous_result and previous_group != new_group:
            # Group upgrade hierarchy: –õ—é–±–∏—Ç–µ–ª–∏ -> –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ -> –ü—Ä–æ—Ñ–∏
            if (previous_group == "–õ—é–±–∏—Ç–µ–ª–∏" and new_group in ["–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ", "–ü—Ä–æ—Ñ–∏"]) or \
               (previous_group == "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ" and new_group == "–ü—Ä–æ—Ñ–∏"):
                # Send congratulation message
                await update.message.reply_text(
                    f'üèÜ –û—Ç–ª–∏—á–Ω–∞—è —Å–µ—Ä–∏—è, {update.effective_user.first_name}! üèÜ\n'
                    f'–¢—ã –ø–æ–¥–Ω—è–ª—Å—è –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∏ —Ç–µ–ø–µ—Ä—å –≤ –≥—Ä—É–ø–ø–µ **"{new_group}"**!\n'
                    f'–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best_series}, {total_tens} ‚Äî —É–≤–µ—Ä–µ–Ω–Ω–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å! üéØ'
                )
                return

        # Regular success message if no group change
        await update.message.reply_text('–ï—Å—Ç—å! –í–æ—Ç —ç—Ç–æ –≤—ã—Å—Ç—Ä–µ–ª‚Ä¶ –î—É—à–∞ —Ä–∞–¥—É–µ—Ç—Å—è. ‚ù§Ô∏è‚Äçüî•üéØ')
    else:
        await update.message.reply_text(
            '–•–º, —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–º–Ω–æ–∂–∫–æ –∑–∞–ø—É—Ç–∞–ª–∞—Å—å üòÖ –ü—Ä–æ–≤–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ–±—ã –≤—Å—ë –±—ã–ª–æ –ø–æ-—á–µ—Å—Ç–Ω–æ–º—É ‚Äî –∏ –ø–æ–≥–Ω–∞–ª–∏ –¥–∞–ª—å—à–µ!'
        )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a help message when the user issues /help."""
    if await handle_group_message(update, context):
        return
        
    await update.message.reply_text(HELP_TEXT)

async def handle_unsupported_content(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle unsupported content types like photos, files or voice messages."""
    if await handle_group_message(update, context):
        return
        
    user_id = update.message.from_user.id
    
    # Check if user has given consent
    if not check_user_consent(user_id):
        await update.message.reply_text(CONSENT_REQUIRED_TEXT)
        return
        
    await update.message.reply_text(
        "–û–π! –ü–æ–∫–∞ —á—Ç–æ —è –Ω–µ —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–æ—Ç–æ, —Ñ–∞–π–ª–∞–º–∏ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ üôà\n"
        "–ù–æ –Ω–∏—á–µ–≥–æ, —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞—É—á—É—Å—å!\n"
        "–ê —Å–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 92 3 ‚úçÔ∏èüôÇ"
        )

# Update the main function to initialize consent DB and add new handlers
async def main() -> None:
    """Set up the database, configure the bot, add handlers, and run polling."""
    # Initialize databases - pass the data directory where needed
    create_database()  # Remove the DATA_DIR parameter
    init_consent_db()

    # Create the bot application
    application = Application.builder().token(BOT_TOKEN).build()

    # Set up bot commands for the menu button
    private_commands = [
        # BotCommand("start", "–ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞"),  # Removed from menu
        BotCommand("status", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"),
        BotCommand("leaderboard", "–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã"),
        BotCommand("leaderboard_all", "–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –≤—Å–µ—Ö –≥—Ä—É–ø–ø"),
        BotCommand("revoke", "–û—Ç–æ–∑–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö"),
        BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
    ]
    
    # Set commands for private chats only
    await application.bot.set_my_commands(
        commands=private_commands,
        scope=BotCommandScopeDefault()
    )
    
    # Remove commands from group chats by setting an empty list
    await application.bot.set_my_commands(
        commands=[],  # empty command list
        scope=BotCommandScopeAllGroupChats()
    )
    
    logger.info("Bot menu commands have been set up for private chats only")

    # Register command handlers
    application.add_handler(CommandHandler("start", start_command))  # Use new consent-aware start handler
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("leaderboard", leaderboard))
    application.add_handler(CommandHandler("leaderboard_all", leaderboard_all))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("revoke", revoke_command))  # Add the revoke command handler
    
    # Register admin handlers
    register_admin_handlers(application)
    
    # Add callback query handler for consent buttons
    application.add_handler(CallbackQueryHandler(handle_consent))

    # Handle unsupported content types (photos, files, voice messages)
    application.add_handler(
# –í–º–µ—Å—Ç–æ filters.MEDIA:
        MessageHandler(
            filters.ATTACHMENT | filters.CONTACT | filters.LOCATION,
            handle_unsupported_content
        )
    )
    
    # Register a message handler (for the best_series / total_tens input)
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_result)
    )

    # Start the bot and run until user presses Ctrl-C
    await application.initialize()
    await application.start()
    
    try:
        await application.updater.start_polling()
        logger.info("Bot started and running...")
        # Keep the program running until user cancels
        await asyncio.Event().wait()
    except (KeyboardInterrupt, SystemExit):
        logger.info("User initiated shutdown...")
    finally:
        logger.info("Shutting down...")
        await application.stop()
        await application.shutdown()
        logger.info("Bot has been shut down.")

if __name__ == "__main__":
    create_database()  # Remove the DATA_DIR parameter
    asyncio.run(main())
