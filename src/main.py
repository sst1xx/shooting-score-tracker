import asyncio
import logging

from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)

# Import your modules (make sure these exist in your project)
from database import create_database, add_user_result, get_user_result, validate_input, get_all_results
from utils import is_user_in_group
from config import BOT_TOKEN

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def handle_group_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """
    Check if message is from a group chat:
    - If bot is mentioned, respond with a message to use private chat
    - Otherwise silently ignore
    Returns True if the message is from a group chat (meaning it should be ignored).
    """
    try:
        if update.effective_chat and update.effective_chat.type in ['group', 'supergroup']:
            # Check if bot is mentioned in the message
            if update.message and update.message.text:
                bot_username = context.bot.username
                if f"@{bot_username}" in update.message.text:
                    logger.info(f"Bot mentioned in group chat by {update.message.from_user.username}")
                    # Reply only when mentioned
                    await update.message.reply_text(
                        f'@{update.message.from_user.username}, –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, '
                        '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—â–∞–π—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –Ω–∞–ø—Ä—è–º—É—é, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –æ–±—â–∏–π —á–∞—Ç.'
                    )
            
            # Always return True for group messages to prevent further processing
            return True
    except Exception as e:
        logger.error(f"Error in handle_group_message: {e}")
    
    return False  # Not a group message, proceed with normal handling

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a welcome message when the user issues /start."""
    if await handle_group_message(update, context):
        return
        
    user_id = update.message.from_user.id
    is_member, error_message = await is_user_in_group(user_id, context.bot)

    if not is_member:
        await update.message.reply_text(f'–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –≥—Ä—É–ø–ø—ã. {error_message}')
        return
        
    await update.message.reply_text(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç—Ä–µ–ª—å–±—ã!'
    )
    await help_command(update, context)

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show a user‚Äôs currently saved result."""
    if await handle_group_message(update, context):
        return
        
    user_id = update.message.from_user.id
    result = get_user_result(user_id)
    if result:
        # result is a tuple of (user_id, username, best_series, central_tens, photo_id)
        await update.message.reply_text(
            f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n–õ—É—á—à–∞—è —Å–µ—Ä–∏—è: {result[2]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö –¥–µ—Å—è—Ç–æ–∫: {result[3]}"
        )
    else:
        await update.message.reply_text("–í—ã –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")

# Update the handle_result function to use the membership check
async def handle_result(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Handle a text message from the user containing best_series and central_tens.
    Example input: "99 7"
    """
    if await handle_group_message(update, context):
        return
        
    user_id = update.message.from_user.id

    # Validate user is in group
    is_member, error_message = await is_user_in_group(user_id, context.bot)

    if not is_member:
        await update.message.reply_text(f'–í–∞–º –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. {error_message}')
        return

    # Parse the incoming text
    text_parts = update.message.text.strip().split()
    if len(text_parts) < 2:
        await update.message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏ –ª—É—á—à—É—é —Å–µ—Ä–∏—é, –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö –¥–µ—Å—è—Ç–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, "99 7"'
        )
        return

    try:
        best_series = int(text_parts[0])
        central_tens = int(text_parts[1])
    except ValueError:
        await update.message.reply_text(
            '–õ—É—á—à–∞—è —Å–µ—Ä–∏—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö –¥–µ—Å—è—Ç–æ–∫ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.'
        )
        return

    # Validate input ranges
    if best_series < central_tens * 10:
        await update.message.reply_text(
            '–õ—É—á—à–∞—è —Å–µ—Ä–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ, —á–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö –¥–µ—Å—è—Ç–æ–∫ √ó 10.'
        )
        return

    if not (0 <= best_series <= 100):
        await update.message.reply_text(
            '–õ—É—á—à–∞—è —Å–µ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 100.'
        )
        return
        
    if not (0 <= central_tens <= 10):
        await update.message.reply_text(
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö –¥–µ—Å—è—Ç–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 10.'
        )
        return

    # Validate and compare with previous results
    if validate_input(best_series, central_tens):
        previous_result = get_user_result(user_id)
        if previous_result:
            prev_best_series = previous_result[2]
            prev_central_tens = previous_result[3]

            # If new results are worse, ignore them
            if best_series < prev_best_series or \
               (best_series == prev_best_series and central_tens < prev_central_tens):
                await update.message.reply_text(
                    '–í–∞—à–∏ –Ω–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ —Ç–∞–∫ —Ö–æ—Ä–æ—à–∏ –∫–∞–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.'
                )
                return

        add_user_result(
            user_id,
            update.message.from_user.first_name,
            best_series,
            central_tens
        )
        await update.message.reply_text('–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã!')
    else:
        await update.message.reply_text(
            '–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.'
        )

async def leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Display the current leaderboard of best results."""
    if await handle_group_message(update, context):
        return
        
    results = get_all_results()
    
    if not results:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return
    
    # Sort results by best_series (descending) and then by central_tens (descending)
    sorted_results = sorted(results, key=lambda x: (x[2], x[3]), reverse=True)
    
    # Format the leaderboard message
    leaderboard_text = "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ üèÜ\n\n"
    for i, result in enumerate(sorted_results[:10], 1):  # Show top 10 results
        username = result[1]
        best_series = result[2]
        central_tens = result[3]
        leaderboard_text += f"{i}. {username}: {best_series} –æ—á–∫–æ–≤, {central_tens} —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö –¥–µ—Å—è—Ç–æ–∫\n"
    
    await update.message.reply_text(leaderboard_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a help message when the user issues /help."""
    if await handle_group_message(update, context):
        return
        
    help_text = (
        "üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞:\n\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à —Ç–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n"
        "/leaderboard - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ß—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç—Ä–µ–ª—å–±—ã, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞:\n"
        "–ª—É—á—à–∞—è_—Å–µ—Ä–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö_–¥–µ—Å—è—Ç–æ–∫\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 99 7"
    )
    
    await update.message.reply_text(help_text)

async def main() -> None:
    """Set up the database, configure the bot, add handlers, and run polling."""
    # Initialize or create your database
    create_database()

    # Create the bot application
    application = Application.builder().token(BOT_TOKEN).build()

    # Register command handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("leaderboard", leaderboard))
    application.add_handler(CommandHandler("help", help_command))

    # Register a message handler (for the best_series / central_tens input)
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_result)
    )

    # Removed scheduler code - will be handled by cron instead
    
    # Start the bot and run until user presses Ctrl-C
    await application.initialize()
    await application.start()
    
    try:
        await application.updater.start_polling()
        logger.info("Bot started and running...")
        # Keep the program running until user cancels
        await asyncio.Event().wait()
    except (KeyboardInterrupt, SystemExit):
        logger.info("User initiated shutdown...")
    finally:
        logger.info("Shutting down...")
        await application.stop()
        await application.shutdown()
        logger.info("Bot has been shut down.")

if __name__ == "__main__":
    create_database()
    asyncio.run(main())
